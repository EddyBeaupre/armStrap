#! /usr/bin/env python3

import argparse
import atexit
import builtins
import crypt
import locale
import logging
import os
import sys
import subprocess
import logging
import collections

from lib import ui as UI
from lib import utils as Utils
from lib import disk as Disk
from lib import aos as aOS

locale.setlocale(locale.LC_ALL, '')

if __name__ == '__main__': 
    try:
        #Always work from where the script live!
        os.chdir(os.path.abspath(os.path.dirname(__file__)))
        
        builtins.urlInfo = { 'baseUrl': "https://archive.armstrap.net", "jsonDrv": ".armStrap.php", "RootFS": "rootfs" }
        builtins.Version = "1.0 Beta 1"
        builtins.Header = os.path.basename(sys.argv[0]) + " version " + builtins.Version
        builtins.Copyright = builtins.Header + ", (C) 2013-2015 Eddy BeauprÃ©"
        
        parser = argparse.ArgumentParser(description=builtins.Copyright)
        group = parser.add_mutually_exclusive_group()
        group.add_argument("-v", "--verbose", help="increase logging verbosity", action="count", default=0)
        group.add_argument("-d", "--debug", help="increase logging verbosity to maximum", action="store_true")
        parser.add_argument("-k", "--kernels", help="show avalable kernels", action="store_true")
        parser.add_argument("-r", "--rootfs", help="show avalable rootfs", action="store_true")
        parser.add_argument("-b", "--boards", help="show avalable boards", action="store_true")
        parser.add_argument("-i", "--ini", help="create a default configuration file", action="store_true")
        
        args = parser.parse_args()
        
        loglevel = logging.WARNING
        
        if args.verbose == 1:
            loglevel = logging.INFO
        
        if (args.verbose > 1) or args.debug:
            loglevel = logging.DEBUG
            
        logFile = os.path.join( os.getcwd(), "armStrap.log" )
        logging.basicConfig(filename = logFile, level = loglevel, filemode="w")
        logging.captureWarnings(True)
        
        UI.armStrap_Dialog()
        builtins.Status = False
                
        if args.ini or (not os.path.isfile(Utils.getPath("armStrap.ini"))):
            if os.path.isfile(Utils.getPath("armStrap.ini")):
                os.unlink(Utils.getPath("armStrap.ini"))        
            Utils.readArmStrapConfig()
            Utils.Exit(text = "Default configuration file 'armStrap.ini' generated, please edit it before running armStrap.", title = "armStrap", timeout = 5, exitStatus = os.EX_OK)
            
        if args.kernels or args.rootfs or args.boards:
            print("\n%s\n" % builtins.Copyright)
        if args.kernels:
            Utils.listKernels()
            
        if args.rootfs:
            Utils.listRootFS()
            
        if args.boards:
            Utils.listBoards()
            
        if args.kernels or args.rootfs or args.boards:
            sys.exit(0)
            
        UI.InfoBox(text = "Reading user configuration", title = "Initializing")
        builtins.Config = Utils.readArmStrapConfig()
        if builtins.Config == False:
            Utils.Exit(text = "Unable to read aconfiguration.", title = "Fatal Error", timeout = 5, exitStatus = os.EX_IOERR)
        
        UI.InfoBox(text = "Fetching armstrap configuration", title = "Initializing")
        builtins.armStrap = Utils.loadJson( type = "config", args = "config=armstrap".split())
        if builtins.armStrap == False:
            Utils.Exit(text = "Unable to download armStrap configuration.", title = "Fatal Error", timeout = 5, exitStatus = os.EX_IOERR)
            
        if not (builtins.Config['Board']['Branch'] in builtins.armStrap['Boards']['Types']):
            Utils.Exit("Board type " + builtins.Config['Board']['Branch'] + " is not supported", title = "Fatal Error", timeout = 5, exitStatus = os.EX_UNAVAILABLE)
        
        UI.InfoBox(text = "Fetching " + builtins.Config['Board']['Branch'] + " configuration", title = "Initializing")
        builtins.Boards = Utils.loadJson( type = "config", args = ("config=" + builtins.Config['Board']['Branch'].lower()).split() )
        if builtins.Boards == False:
            Utils.Exit(text = "Unable to download boards configuration for " + builtins.Config['Board']['Branch'], title = "Fatal Error", timeout = 5, exitStatus = os.EX_IOERR)
            
        if not (builtins.Config['Board']['Model'] in builtins.Boards['Boards']['Models']):
            Utils.Exit("Board model " + builtins.Config['Board']['Model'] + " is not supported", title = "Fatal Error", timeout = 5, exitStatus = os.EX_UNAVAILABLE)            
            
        UI.InfoBox(text = "Fetching RootFS configuration", title = "Initializing")
        builtins.Kernels = Utils.loadJson( type = "rootfs" )
        
        if not (builtins.Boards['Common']['CpuArch'] + builtins.Boards['Common']['CpuFamily'] in builtins.Kernels):
            Utils.Exit(text = "RootFS unavalable for " + builtins.Boards['Common']['CpuArch'] + builtins.Boards['Common']['CpuFamily'], title = "Fatal Error", timeout = 5, exitStatus = os.EX_UNAVAILABLE)
            
        if not (builtins.Config['Distribution']['Family'] in builtins.Kernels[builtins.Boards['Common']['CpuArch'] + builtins.Boards['Common']['CpuFamily']]):
            Utils.Exit(text = "RootFS Familly " + builtins.Config['Distribution']['Family'] + " unavalable for " + builtins.Boards['Common']['CpuArch'] + builtins.Boards['Common']['CpuFamily'], title = "Fatal Error", timeout = 5, exitStatus = os.EX_UNAVAILABLE)
            
        if not (builtins.Config['Distribution']['Version'] in builtins.Kernels[builtins.Boards['Common']['CpuArch'] + builtins.Boards['Common']['CpuFamily']][builtins.Config['Distribution']['Family']]):
            Utils.Exit(text = "RootFS version " + builtins.Config['Distribution']['Version'] + " unavalable for " + builtins.Config['Distribution']['Family'], title = "Fatal Error", timeout = 5, exitStatus = os.EX_UNAVAILABLE)
            
        UI.InfoBox(text = "Fetching kernels configuration", title = "Initializing")
        builtins.Kernels = Utils.loadJson( type = "config", args = "config=kernels".split() )
        if builtins.Kernels == False:
            Utils.Exit(text = "Unable to download kernels configuration.", title = "Fatal Error", timeout = 5, exitStatus = os.EX_IOERR)
            
        if not (builtins.Boards[builtins.Config['Board']['Model']]['Cpu'] in builtins.Kernels[builtins.Config['Kernel']['Version']]['cpu']):
            Utils.Exit(text = "Board " + builtins.Config['Board']['Model'] + " is not compatible with kernel " + builtins.Config['Kernel']['Version'], title = "Fatal Error", timeout = 5, exitStatus = os.EX_IOERR)        
        
        if UI.Summary() == "cancel":
            Utils.Exit(text = "armStrap will now exit", title = "Cancel by user", timeout = 5, exitStatus = os.EX_OK)
    
        UI.Status()

        if builtins.Config.has_option('Output', 'Device'):
            (Device, partList) = Disk.formatSD()
        else:
            (Device, partList) = Disk.formatIMG()
        
        if ( Device == False ) or ( partList == False ):
            Utils.Exit(text = "Error while initializing device.", title = "Fatal Error", timeout = 5, exitStatus = os.EX_IOERR)
        
        builtins.Status.update(percent = 10)
    
        #Device = "/dev/mmcblk0"
        #partList = [ { 'device': "/dev/mmcblk0p1", 'Mount_Order': "1", 'Mount_Point': "/"} ]
        
        partMount = Disk.mountPartitions(Device = Device, partList = partList)
    
        if partMount == False:
            Utils.Exit(text = "Error while mounting device.", title = "Fatal Error", timeout = 5, exitStatus = os.EX_IOERR)
    
        atexit.register(Disk.unmountPartitions, Device = Device, partList = partMount)
    
        builtins.Status.update(percent = 15)
    
        if aOS.installRootFS() == False:
            Utils.Exit(text = "Error while extracting RootFS.", title = "Fatal Error", timeout = 5, exitStatus = os.EX_DATAERR)
        builtins.Status.update(percent = 25)

        if aOS.chrootConfig() == False:
            Utils.Exit(text = "Error while configuring chroot environment.", title = "Fatal Error", timeout = 5, exitStatus = os.EX_UNAVAILABLE)
    
        atexit.register(aOS.chrootDeconfig)

        if Utils.runChrootAptGet(command = "update") == False:
            Utils.Exit(text = "Error while running apt-get update", title = "Fatal Error", timeout = 5, exitStatus = os.EX_SOFTWARE)
        builtins.Status.update(name = "Installing RootFS", value = "-30", percent = 40)

        if Utils.runChrootAptGet(command = "dist-upgrade") == False:
            Utils.Exit(text = "Error while running apt-get dist-upgrade", title = "Fatal Error", timeout = 5, exitStatus = os.EX_SOFTWARE)
        builtins.Status.update(name = "Installing RootFS", value = "-60", percent = 50)
        
        if aOS.chrootPasswd(User = "root", Password = builtins.Config['Users']['RootPassword']) == False:
            Utils.Exit(text = "Error while setting root password", title = "Fatal Error", timeout = 5, exitStatus = os.EX_SOFTWARE)
        builtins.Status.update(name = "Installing RootFS", value = "-65", percent = 51)
        
        if aOS.chrootAddUser(User = builtins.Config['Users']['UserName'], Password = builtins.Config['Users']['UserPassword']):
            Utils.Exit(text = "Error while creating user " + builtins.Config['Users']['UserName'], title = "Fatal Error", timeout = 5, exitStatus = os.EX_SOFTWARE)
        builtins.Status.update(name = "Installing RootFS", value = "-65", percent = 52)
    
        if aOS.setLocales() == False:
            Utils.Exit(text = "Error while configuring locales", title = "Fatal Error", timeout = 5, exitStatus = os.EX_SOFTWARE)
        builtins.Status.update(name = "Installing RootFS", value = "-70", percent = 53)

        if aOS.setTimeZone() == False:
            Utils.Exit(text = "Error while configuring timezone", title = "Fatal Error", timeout = 5, exitStatus = os.EX_SOFTWARE)
        builtins.Status.update(name = "Installing RootFS", value = "-75", percent = 54)
        
        if aOS.setHostName()  == False:
            Utils.Exit(text = "Error while configuring hostname", title = "Fatal Error", timeout = 5, exitStatus = os.EX_SOFTWARE)
        builtins.Status.update(name = "Installing RootFS", value = "-80", percent = 55)
        
        boardPackages = []
        
        if Utils.getConfigValue(builtins.armStrap, 'BoardsPackages', 'Mandatory') != False:
            boardPackages += Utils.getConfigValue(builtins.armStrap, 'BoardsPackages', 'Mandatory').split()
            
        if Utils.getConfigValue(builtins.Boards, 'BoardsPackages', 'Mandatory') != False:
            boardPackages +=Utils.getConfigValue(builtins.Boards, 'BoardsPackages', 'Mandatory').split()
            
        if Utils.getConfigValue(builtins.Config, 'BoardsPackages', 'Mandatory') != False:
            boardPackages +=Utils.getConfigValue(builtins.Config, 'BoardsPackages', 'Mandatory').split()
            
        if Utils.getConfigValue(builtins.Config, 'BoardsPackages', 'InstallOptionalsPackages') != False:
            if builtins.Config['BoardsPackages'].getboolean('InstallOptionalsPackages') == True:
                if Utils.getConfigValue(builtins.armStrap, 'BoardsPackages', 'Optional') != False:
                    boardPackages +=Utils.getConfigValue(builtins.armStrap, 'BoardsPackages', 'Optional').Split()
                if Utils.getConfigValue(builtins.Boards, 'BoardsPackages', 'Optional') != False:
                    boardPackages +=Utils.getConfigValue(builtins.Boards, 'BoardsPackages', 'Optional').Split()
                if Utils.getConfigValue(builtins.Config, 'BoardsPackages', 'Optional') != False:
                    boardPackages +=Utils.getConfigValue(builtins.Config, 'BoardsPackages', 'Optional').Split()
                
        if Utils.getConfigSection(builtins.Config, 'SwapFile') != False:
            boardPackages += "dphys-swapfile".split()
                
        if Utils.runChrootAptGet(command = "install", arguments = boardPackages) == False:
                Utils.Exit(text = "Error while installing packages", title = "Fatal Error", timeout = 5, exitStatus = os.EX_SOFTWARE)

        if Utils.getConfigSection(builtins.Config, 'SwapFile') != False:
            if aOS.setSwapFile()  == False:
                Utils.Exit(text = "Error while configuring package dphys-swapfile", title = "Fatal Error", timeout = 5, exitStatus = os.EX_SOFTWARE)

        builtins.Status.update(name = "Installing RootFS", value = "-85", percent = 57)
                
        if aOS.setTTY() == False:
            Utils.Exit(text = "Error while configuring TTY", title = "Fatal Error", timeout = 5, exitStatus = os.EX_SOFTWARE)
        builtins.Status.update(name = "Installing RootFS", value = "-90", percent = 58)
            
        if aOS.setFsTab() == False:
            Utils.Exit(text = "Error while configuring fstab", title = "Fatal Error", timeout = 5, exitStatus = os.EX_SOFTWARE)
        builtins.Status.update(name = "Installing RootFS", value = "-95", percent = 59)
            
        if aOS.setInterface() == False:
            Utils.Exit(text = "Error while configuring networking", title = "Fatal Error", timeout = 5, exitStatus = os.EX_SOFTWARE)
        builtins.Status.update(name = "Installing RootFS", value = "Done", percent = 60)
        
        builtins.Status.update(name = "Installing BootLoader", value = "In Progress")
        if Utils.runChrootAptGet(command = "install", arguments = builtins.Kernels[builtins.Config['Kernel']['Version'].lower()]['bootloader'].split() ) == False:
            Utils.Exit(text = "Error while installing bootloader", title = "Fatal Error", timeout = 5, exitStatus = os.EX_SOFTWARE)
        if aOS.ubootSetup(Device = Device) == False:
            Utils.Exit(text = "Error while configuring bootloader", title = "Fatal Error", timeout = 5, exitStatus = os.EX_SOFTWARE)
        
        builtins.Status.update(name = "Installing BootLoader", value = "Done", percent = 70) 
        
        builtins.Status.update(name = "Installing Kernel", value = "In Progress") 
        if Utils.runChrootAptGet(command = "install", arguments = ("armstrap-linux-" + builtins.Config['Kernel']['Version']).split() ) == False:
            Utils.Exit(text = "Error while installing Kernel", title = "Fatal Error", timeout = 5, exitStatus = os.EX_SOFTWARE)
        builtins.Status.update(name = "Installing Kernel", value = "Done", percent = 90, text = "Cleaning up")
        
        atexit.unregister(aOS.chrootDeconfig)
    
        if aOS.chrootDeconfig() == False:
            Utils.Exit(text = "Error while deconfiguring chroot environment", title = "Fatal Error", timeout = 5, exitStatus = os.EX_SOFTWARE)
        builtins.Status.update(percent = 95, text = "Cleaning up")
        atexit.unregister(Disk.unmountPartitions)
    
        if Disk.unmountPartitions(Device = Device, partList = partMount) == False:
            Utils.Exit(text = "Error while deconfiguring chroot environment", title = "Fatal Error", timeout = 5, exitStatus = os.EX_SOFTWARE)
            
        builtins.Status.update(percent = 100, text = "Done")
        
        builtins.Status.end()
        
        Utils.Exit(text = "All done", title = "Exiting", timeout = 5, exitStatus = os.EX_SOFTWARE)
    except SystemExit:
        pass
    except:
        UI.logException(False)
        Utils.Exit(text = "General error.", title = "Fatal Error", timeout = 5, exitStatus = os.EX_SOFTWARE)
